{{- $platform := "bmrg" -}}
{{- $product := "flow" -}}
{{- $tier := "config" -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "bmrg.name" (dict "context" $ "tier" $tier ) }}
  labels:
    {{- include "bmrg.labels.chart" (dict "context" $ "tier" $tier ) | nindent 4 }}
data:
  application.properties: |
    server.port=8080
    spring.data.mongodb.uri=mongodb://{{ $.Values.database.mongodb.user }}:${MONGODB_PASSWORD}@{{ $.Values.database.mongodb.host }}:{{ $.Values.database.mongodb.port }}/boomerang
    {{- range $k, $v := $.Values.services }}
    {{ $k }}.service.host={{- include "bmrg.name" (dict "context" $ "tier" "services" "component" $k ) }}
    {{ $k }}.service.root={{ if $.Values.ingress.root }}{{ $.Values.ingress.root }}{{ end }}/{{ $product }}/services/{{ $k }}
    {{- end }}
    {{- include "bmrg.core.services" $ | indent 4 }}
    actionlistener.nats.url={{ $.Values.nats.url }}
    actionlistener.nats.cluster={{ $.Values.nats.cluster }}
    {{- if $.Values.general.enable.debug }}
    logging.level.org.springframework.web.client.RestTemplate=DEBUG
    logging.level.org.springframework.core.env.PropertySourcesPropertyResolver=DEBUG
    logging.level.root=INFO
    {{- end }}
    kube.namespace={{ $.Release.Namespace }}
    kube.worker.debug={{ $.Values.general.enable.debug }}
    kube.api.debug={{ $.Values.general.enable.debug }}
    kube.worker.hostaliases={{ $.Values.hostAliases | toJson }}
    kube.worker.serviceaccount={{- if $.Values.workers.security.enable }}{{ $platform }}-{{ $product }}-worker{{ end }}
    kube.worker.logging.type={{ $.Values.workers.logging.type }}
    kube.worker.logging.host={{ $.Values.workers.logging.host }}
    kube.worker.logging.port={{ $.Values.workers.logging.port }}
    kube.worker.logging.keystore.name=/etc/secrets/logstash-elasticsearch-keystore.jks
    kube.worker.logging.keystore.password=changeme
    kube.worker.node.dedicated={{ $.Values.workers.enable.dedicatedNodes }}
    boomerang.environment={{ .Release.Namespace }}
    boomerang.standalone={{ $.Values.general.enable.standalone }}
    boomerang.otc=${FLOW_OTC}
    boomerang.authorization.basic.password=coronet-cottage-nave-idiom-resume
    swagger.enable={{ $.Values.general.enable.apidocs }}
    proxy.enable={{ $.Values.proxy.enable }}
    {{- if $.Values.proxy.enable }}
    proxy.host={{ $.Values.proxy.host }}
    proxy.port={{ $.Values.proxy.port }}
    proxy.ignore={{ $.Values.proxy.ignore }}
    newrelic.config.common.proxy_host={{ $.Values.proxy.host }}
    newrelic.config.common.proxy_port={{ $.Values.proxy.port }}
    newrelic.config.proxy_host={{ $.Values.proxy.host }}
    newrelic.config.proxy_port={{ $.Values.proxy.port }}
    {{- end }}
    opentracing.jaeger.enabled={{ $.Values.monitoring.jaeger.enabled }}
    opentracing.jaeger.udp-sender.host={{ $.Values.monitoring.jaeger.agent.host }}.{{ $.Values.monitoring.jaeger.namespace }}
    opentracing.jaeger.udp-sender.port={{ $.Values.monitoring.jaeger.agent.port }}
    opentracing.jaeger.http-sender.url=http://{{ $.Values.monitoring.jaeger.collector.host }}.{{ $.Values.monitoring.jaeger.namespace }}:{{ $.Values.monitoring.jaeger.collector.port }}/api/traces
    opentracing.jaeger.remote-controlled-sampler.host-port={{ $.Values.monitoring.jaeger.remoteControlledSampler.host }}.{{ $.Values.monitoring.jaeger.namespace }}:{{ $.Values.monitoring.jaeger.remoteControlledSampler.port }}